{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyApps\\\\COMP354PROJECT\\\\calculator-app\\\\src\\\\Pages\\\\Calculator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Display from \"../Components/Display\";\nimport Button from \"../Components/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const handleButtonClick = value => {\n    if (value === \"=\") {\n      try {\n        const evaluatedResult = eval(input); // Be cautious with eval for user-generated code\n        setResult(evaluatedResult.toString());\n      } catch (error) {\n        setResult(\"Error\");\n      }\n    } else if (value === \"C\") {\n      setInput(\"\");\n      setResult(\"\");\n    } else if ([\"cos\", \"sin\", \"tan\"].includes(value)) {\n      handleFunction(value);\n    } else {\n      setInput(input + value);\n    }\n  };\n  const handleFunction = func => {\n    const num = parseFloat(input);\n    if (isNaN(num)) {\n      setResult(\"Invalid Input\");\n      return;\n    }\n    let funcResult;\n    switch (func) {\n      case \"cos\":\n        funcResult = Math.cos(num);\n        break;\n      case \"sin\":\n        funcResult = Math.sin(num);\n        break;\n      case \"tan\":\n        funcResult = Math.tan(num);\n        break;\n      default:\n        funcResult = 0;\n        break;\n    }\n    setResult(funcResult.toString());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(Display, {\n      input: input,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [[\"7\", \"8\", \"9\", \"/\", \"cos\", \"4\", \"5\", \"6\", \"*\", \"sin\", \"1\", \"2\", \"3\", \"-\", \"tan\", \"0\", \".\", \"=\", \"+\"].map(button => /*#__PURE__*/_jsxDEV(Button, {\n        label: button,\n        onClick: () => handleButtonClick(button)\n      }, button, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"C\",\n        onClick: () => handleButtonClick(\"C\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"YzqDyJ2o9kOXO561mkhTut2HHmk=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","Display","Button","jsxDEV","_jsxDEV","Calculator","_s","input","setInput","result","setResult","handleButtonClick","value","evaluatedResult","eval","toString","error","includes","handleFunction","func","num","parseFloat","isNaN","funcResult","Math","cos","sin","tan","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","button","label","onClick","_c","$RefreshReg$"],"sources":["C:/MyApps/COMP354PROJECT/calculator-app/src/Pages/Calculator.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Display from \"../Components/Display\";\r\nimport Button from \"../Components/Button\";\r\n\r\nconst Calculator: React.FC = () => {\r\n  const [input, setInput] = useState<string>(\"\");\r\n  const [result, setResult] = useState<string>(\"\");\r\n\r\n  const handleButtonClick = (value: string) => {\r\n    if (value === \"=\") {\r\n      try {\r\n        const evaluatedResult = eval(input); // Be cautious with eval for user-generated code\r\n        setResult(evaluatedResult.toString());\r\n      } catch (error) {\r\n        setResult(\"Error\");\r\n      }\r\n    } else if (value === \"C\") {\r\n      setInput(\"\");\r\n      setResult(\"\");\r\n    } else if ([\"cos\", \"sin\", \"tan\"].includes(value)) {\r\n      handleFunction(value);\r\n    } else {\r\n      setInput(input + value);\r\n    }\r\n  };\r\n\r\n  const handleFunction = (func: string) => {\r\n    const num = parseFloat(input);\r\n    if (isNaN(num)) {\r\n      setResult(\"Invalid Input\");\r\n      return;\r\n    }\r\n\r\n    let funcResult;\r\n    switch (func) {\r\n      case \"cos\":\r\n        funcResult = Math.cos(num);\r\n        break;\r\n      case \"sin\":\r\n        funcResult = Math.sin(num);\r\n        break;\r\n      case \"tan\":\r\n        funcResult = Math.tan(num);\r\n        break;\r\n      default:\r\n        funcResult = 0;\r\n        break;\r\n    }\r\n    setResult(funcResult.toString());\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display input={input} result={result} />\r\n      <div className=\"buttons\">\r\n        {[\"7\", \"8\", \"9\", \"/\", \"cos\", \"4\", \"5\", \"6\", \"*\", \"sin\", \"1\", \"2\", \"3\", \"-\", \"tan\", \"0\", \".\", \"=\", \"+\"].map((button) => (\r\n          <Button key={button} label={button} onClick={() => handleButtonClick(button)} />\r\n        ))}\r\n        <Button label=\"C\" onClick={() => handleButtonClick(\"C\")} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}